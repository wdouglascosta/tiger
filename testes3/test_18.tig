/*************************************************************************/
/*                                                                       */
/*   SNU-RT Benchmark Suite for Worst Case Timing Analysis               */
/*   =====================================================               */
/*                              Collected and Modified by S.-S. Lim      */
/*                                           sslim@archi.snu.ac.kr       */
/*                                         Real-Time Research Group      */
/*                                        Seoul National University      */
/*                                                                       */
/*                                                                       */
/*        < Features > - restrictions for our experimental environment   */
/*                                                                       */
/*          1. Completely structured.                                    */
/*               - There are no unconditional jumps.                     */
/*               - There are no exit from loop bodies.                   */
/*                 (There are no 'break' or 'return' in loop bodies)     */
/*          2. No 'switch' statements.                                   */
/*          3. No 'do..while' statements.                                */
/*          4. Expressions are restricted.                               */
/*               - There are no multiple expressions joined by 'or',     */
/*                'and' operations.                                      */
/*          5. No library calls.                                         */
/*               - All the functions needed are implemented in the       */
/*                 source file.                                          */
/*                                                                       */
/*                                                                       */
/*************************************************************************/
/*                                                                       */
/*  FILE: qsort-exam.c                                                   */
/*  SOURCE : Numerical Recipes in C - The Second Edition                 */
/*                                                                       */
/*  DESCRIPTION :                                                        */
/*                                                                       */
/*     Non-recursive version of quick sort algorithm.                    */
/*     This example sorts 20 floating point numbers, arr[].              */
/*                                                                       */
/*  REMARK :                                                             */
/*                                                                       */
/*  EXECUTION TIME :                                                     */
/*                                                                       */
/*                                                                       */
/*************************************************************************/


let

  type intARRAY = array of int

  var M := 7
  var NSTACK := 50
  var arr := intARRAY[20] of 0

  var istack := intARRAY[100] of 0

  function sort(n:int) = 
  let

   var ir:=n
   var k:=0
   var l:=1
   var jstack:=0
   var temp:=0
   var a:=0
   var i:=0
   var j:=0

  in

  while (1) do (
    if (ir-l < M) then (
       for j:=l+1 to ir do (
        a:=arr[j];
        for i:=l to j-1 do (
        if (arr[i] <= a) then break;
        arr[i+1]:=arr[i]
       );
       arr[i+1]:=a
      );
      if (jstack = 0) then break;
      ir:=istack[jstack];
      jstack := jstack-1;
      l:=istack[jstack];
      jstack := jstack-1
    ) else (
      k:=(l+ir) >> 1;
      temp:=arr[k];
      arr[k]:=arr[l+1];
      arr[l+1]:=temp;
      if (arr[l] > arr[ir]) then (
	temp:=arr[l];
	arr[l]:=arr[ir];
	arr[ir]:=temp
      );
      if (arr[l+1] > arr[ir]) then (
	temp:=arr[l+1];
	arr[l+1]:=arr[ir];
	arr[ir]:=temp
      );
      if (arr[l] > arr[l+1]) then (
	temp:=arr[l];
	arr[l]:=arr[l+1];
	arr[l+1]:=temp
      );
      i:=l+1;
      j:=ir;
      a:=arr[l+1];
      while (1) do (
	i:=i+1; while (arr[i] < a) do i:=i+1;
	j:=j-1; while (arr[j] > a) do j:=j-1;
	if (j < i) then break;
	temp:=arr[i];
	arr[i]:=arr[j];
	arr[j]:=temp
      );
      arr[l+1]:=arr[j];
      arr[j]:=a;
      jstack := jstack + 2;

      if (ir-i+1 >= j-l) then (
	istack[jstack]:=ir;
	istack[jstack-1]:=i;
	ir:=j-1
      ) else (
	istack[jstack]:=j-1;
	istack[jstack-1]:=l;
	l=i
      )
    )
  )
  end

 function printint(i: int) =
  let function f(i:int) = if i>0 
             then (f(i/10); print(chr(i-i/10*10+ord("0"))))
   in if i<0 then (print("-"); f(-i))
      else if i>0 then f(i)
      else print("0")
  end


in

  arr[0]:=5;
  arr[1]:=4;
  arr[2]:=10;
  arr[3]:=1;
  arr[4]:=5;
  arr[5]:=100;
  arr[6]:=231;
  arr[7]:=111;
  arr[8]:=49;
  arr[9]:=99;
  arr[10]:=10;
  arr[11]:=150;
  arr[12]:=2222;
  arr[13]:=101;
  arr[14]:=77;
  arr[15]:=44;
  arr[16]:=35;
  arr[17]:=2054;
  arr[18]:=999;
  arr[19]:=88;

  sort(20);

  for x:=0 to 20 do 
    printint(arr[x])

end

