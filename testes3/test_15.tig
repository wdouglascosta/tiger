/*************************************************************************/
/*                                                                       */
/*   SNU-RT Benchmark Suite for Worst Case Timing Analysis               */
/*   =====================================================               */
/*                              Collected and Modified by S.-S. Lim      */
/*                                           sslim@archi.snu.ac.kr       */
/*                                         Real-Time Research Group      */
/*                                        Seoul National University      */
/*                                                                       */
/*                                                                       */
/*        < Features > - restrictions for our experimental environment   */
/*                                                                       */
/*          1. Completely structured.                                    */
/*               - There are no unconditional jumps.                     */
/*               - There are no exit from loop bodies.                   */
/*                 (There are no 'break' or 'return' in loop bodies)     */
/*          2. No 'switch' statements.                                   */
/*          3. No 'do..while' statements.                                */
/*          4. Expressions are restricted.                               */
/*               - There are no multiple expressions joined by 'or',     */
/*                'and' operations.                                      */
/*          5. No library calls.                                         */
/*               - All the functions needed are implemented in the       */
/*                 source file.                                          */
/*                                                                       */
/*                                                                       */
/*************************************************************************/
/*                                                                       */
/*  FILE: insertsort.c                                                   */
/*  SOURCE : Public Domain Code                                          */
/*                                                                       */
/*  DESCRIPTION :                                                        */
/*                                                                       */
/*     Insertion sort for 10 integer numbers.                            */
/*     The integer array a[] is initialized in main function.            */
/*                                                                       */
/*  REMARK :                                                             */
/*                                                                       */
/*  EXECUTION TIME :                                                     */
/*                                                                       */
/*                                                                       */
/*************************************************************************/


let

  type intARRAY = array of int

  var i := 0
  var j := 0 
  var temp := 0
  var a := intARRAY[11] of 0

 function printint(i: int) =
  let function f(i:int) = if i>0 
             then (f(i/10); print(chr(i-i/10*10+ord("0"))))
   in if i<0 then (print("-"); f(-i))
      else if i>0 then f(i)
      else print("0")
  end

in

  a[0] := 0;   /* assume all data is positive */
  a[1] := 11; 
  a[2] := 10;
  a[3] := 9; 
  a[4] := 8;
  a[5] := 7;
  a[6] := 6;
  a[7] := 5;
  a[8] := 4;
  a[9] := 3;
  a[10] := 2;

  i := 2;

  while(i <= 10) do (
    j := i;
    while (a[j] < a[j-1]) do
      (
	temp := a[j];
	a[j] := a[j-1];
	a[j-1] := temp;
	j := j - 1
      );
    i := i + 1
  );

  for x:= to 10 do
     printint(a[x])

end

	
