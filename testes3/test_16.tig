/*************************************************************************/
/*                                                                       */
/*   SNU-RT Benchmark Suite for Worst Case Timing Analysis               */
/*   =====================================================               */
/*                              Collected and Modified by S.-S. Lim      */
/*                                           sslim@archi.snu.ac.kr       */
/*                                         Real-Time Research Group      */
/*                                        Seoul National University      */
/*                                                                       */
/*                                                                       */
/*        < Features > - restrictions for our experimental environment   */
/*                                                                       */
/*          1. Completely structured.                                    */
/*               - There are no unconditional jumps.                     */
/*               - There are no exit from loop bodies.                   */
/*                 (There are no 'break' or 'return' in loop bodies)     */
/*          2. No 'switch' statements.                                   */
/*          3. No 'do..while' statements.                                */
/*          4. Expressions are restricted.                               */
/*               - There are no multiple expressions joined by 'or',     */
/*                'and' operations.                                      */
/*          5. No library calls.                                         */
/*               - All the functions needed are implemented in the       */
/*                 source file.                                          */
/*                                                                       */
/*                                                                       */
/*************************************************************************/
/*                                                                       */
/*  FILE: jfdctint.c                                                     */
/*  SOURCE : Thomas G. Lane,  Public domain JPEG source code.            */
/*           Modified by Steven Li at Princeton University.              */
/*                                                                       */
/*  DESCRIPTION :                                                        */
/*                                                                       */
/*     JPEG slow-but-accurate integer implementation of the forward      */
/*     DCT (Discrete Cosine Transform).                                  */
/*                                                                       */
/*  REMARK :                                                             */
/*                                                                       */
/*  EXECUTION TIME :                                                     */
/*                                                                       */
/*                                                                       */
/*************************************************************************/


/**********************************************************************
    Functions to be timed
***********************************************************************/

/* This definitions are added by Steven Li so as to bypass the header
   files.
*/

let

 type intARRAY = array of int

 var DCTSIZE := 8

 var seed := 0

/*
 * jfdctint.c
 *
 * Copyright (C) 1991-1994, Thomas G. Lane.
 * This file is part of the Independent JPEG Group's software.
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains a slow-but-accurate integer implementation of the
 * forward DCT (Discrete Cosine Transform).
 *
 * A 2-D DCT can be done by 1-D DCT on each row followed by 1-D DCT
 * on each column.  Direct algorithms are also available, but they are
 * much more complex and seem not to be any faster when reduced to code.
 *
 * This implementation is based on an algorithm described in
 *   C. Loeffler, A. Ligtenberg and G. Moschytz, "Practical Fast 1-D DCT
 *   Algorithms with 11 Multiplications", Proc. Int'l. Conf. on Acoustics,
 *   Speech, and Signal Processing 1989 (ICASSP '89), pp. 988-991.
 * The primary algorithm described there uses 11 multiplies and 29 adds.
 * We use their alternate method with 12 multiplies and 32 adds.
 * The advantage of this method is that no data path contains more than one
 * multiplication; this allows a very simple and accurate implementation in
 * scaled fixed-point arithmetic, with a minimal number of shifts.
 */


/*
 * This module is specialized to the case DCTSIZE = 8.
 */


/*
 * The poop on this scaling stuff is as follows:
 *
 * Each 1-D DCT step produces outputs which are a factor of sqrt(N)
 * larger than the true DCT outputs.  The final outputs are therefore
 * a factor of N larger than desired; since N=8 this can be cured by
 * a simple right shift at the end of the algorithm.  The advantage of
 * this arrangement is that we save two multiplications per 1-D DCT,
 * because the y0 and y4 outputs need not be divided by sqrt(N).
 * In the IJG code, this factor of 8 is removed by the quantization step
 * (in jcdctmgr.c), NOT in this module.
 *
 * We have to do addition and subtraction of the integer inputs, which
 * is no problem, and multiplication by fractional constants, which is
 * a problem to do in integer arithmetic.  We multiply all the constants
 * by CONST_SCALE and convert them to integer constants (thus retaining
 * CONST_BITS bits of precision in the constants).  After doing a
 * multiplication we have to divide the product by CONST_SCALE, with proper
 * rounding, to produce the correct output.  This division can be done
 * cheaply as a right shift of CONST_BITS bits.  We postpone shifting
 * as long as possible so that partial sums can be added together with
 * full fractional precision.
 *
 * The outputs of the first pass are scaled up by PASS1_BITS bits so that
 * they are represented to better-than-integral precision.  These outputs
 * require BITS_IN_JSAMPLE + PASS1_BITS + 3 bits; this fits in a 16-bit word
 * with the recommended scaling.  (For 12-bit sample data, the intermediate
 * array is INT32 anyway.)
 *
 * To avoid overflow of the 32-bit intermediate results in pass 2, we must
 * have BITS_IN_JSAMPLE + CONST_BITS + PASS1_BITS <= 26.  Error analysis
 * shows that the values given below are the most effective.
 */

 var CONST_BITS := 13
 var PASS1_BITS := 2


/* Some C compilers fail to reduce "FIX(constant)" at compile time, thus
 * causing a lot of useless floating-point operations at run time.
 * To get around this we use the following pre-calculated constants.
 * If you change CONST_BITS you may want to add appropriate values.
 * (With a reasonable C compiler, you can just rely on the FIX() macro...)
 */

 var FIX_0_298631336 := 2446	/* FIX(0.298631336) */
 var FIX_0_390180644 := 3196	/* FIX(0.390180644) */
 var FIX_0_541196100 := 4433	/* FIX(0.541196100) */
 var FIX_0_765366865 := 6270	/* FIX(0.765366865) */
 var FIX_0_899976223 := 7373	/* FIX(0.899976223) */
 var FIX_1_175875602 := 9633	/* FIX(1.175875602) */
 var FIX_1_501321110 := 12299	/* FIX(1.501321110) */
 var FIX_1_847759065 := 15137	/* FIX(1.847759065) */
 var FIX_1_961570560 := 16069	/* FIX(1.961570560) */
 var FIX_2_053119869 := 16819	/* FIX(2.053119869) */
 var FIX_2_562915447 := 20995	/* FIX(2.562915447) */
 var FIX_3_072711026 := 25172	/* FIX(3.072711026) */



/* Multiply an INT32 variable by an INT32 constant to yield an INT32 result.
 * For 8-bit samples with the recommended scaling, all the variable
 * and constant values involved are no more than 16 bits wide, so a
 * 16x16->32 bit multiply can be used instead of a full 32x32 multiply.
 * For 12-bit samples, a full 32-bit multiplication will be needed.
 */

 var data := intARRAY[64] of 0

/*
 * Perform the forward DCT on one block of samples.
 */

 function jpeg_fdct_islow () =
 let
  var tmp0 := 0
  var tmp1 := 0
  var tmp2 := 0
  var tmp3 := 0
  var tmp4 := 0
  var tmp5 := 0
  var tmp6 := 0
  var tmp7 := 0
  var tmp10 := 0
  var tmp11 := 0
  var tmp12 := 0
  var tmp13 := 0
  var z1 := 0
  var z2 := 0
  var z3 := 0
  var z4 := 0
  var z5 := 0
  var dataptr := intARRAY[64] of 0

 in

  /* Pass 1: process rows. */
  /* Note results are scaled up by sqrt(8) compared to a true DCT; */
  /* furthermore, we scale the results by 2**PASS1_BITS. */

  dataptr := data;
  for ctr := DCTSIZE-1 to 0 do (
    tmp0 := dataptr[0] + dataptr[7];
    tmp7 := dataptr[0] - dataptr[7];
    tmp1 := dataptr[1] + dataptr[6];
    tmp6 := dataptr[1] - dataptr[6];
    tmp2 := dataptr[2] + dataptr[5];
    tmp5 := dataptr[2] - dataptr[5];
    tmp3 := dataptr[3] + dataptr[4];
    tmp4 := dataptr[3] - dataptr[4];
    
    /* Even part per LL&M figure 1 --- note that published figure is faulty;
     * rotator "sqrt(2)*c1" should be "sqrt(2)*c6".
     */
    
    tmp10 := tmp0 + tmp3;
    tmp13 := tmp0 - tmp3;
    tmp11 := tmp1 + tmp2;
    tmp12 := tmp1 - tmp2;
    
    dataptr[0] := ((tmp10 + tmp11) << PASS1_BITS);
    dataptr[4] := ((tmp10 - tmp11) << PASS1_BITS);
    
    z1 := (tmp12 + tmp13) * FIX_0_541196100;
    dataptr[2] := ((z1 + tmp13 * FIX_0_765366865) + (1 << (CONST_BITS-PASS1_BITS-1)) >>  CONST_BITS-PASS1_BITS);
    
    dataptr[6] := ((z1 + tmp12 * -FIX_1_847759065) + (1 << (CONST_BITS-PASS1_BITS-1)) >>  CONST_BITS-PASS1_BITS);
    
    /* Odd part per figure 8 --- note paper omits factor of sqrt(2).
     * cK represents cos(K*pi/16).
     * i0..i3 in the paper are tmp4..tmp7 here.
     */
    
    z1 := tmp4 + tmp7;
    z2 := tmp5 + tmp6;
    z3 := tmp4 + tmp6;
    z4 := tmp5 + tmp7;
    z5 := z3 + z4 * FIX_1_175875602; /* sqrt(2) * c3 */
    
    tmp4 := tmp4 * FIX_0_298631336; /* sqrt(2) * (-c1+c3+c5-c7) */
    tmp5 := tmp5 * FIX_2_053119869; /* sqrt(2) * ( c1+c3-c5+c7) */
    tmp6 := tmp6 * FIX_3_072711026; /* sqrt(2) * ( c1+c3+c5-c7) */
    tmp7 := tmp7 * FIX_1_501321110; /* sqrt(2) * ( c1+c3-c5-c7) */
    z1 := z1 * -FIX_0_899976223; /* sqrt(2) * (c7-c3) */
    z2 := z2 * -FIX_2_562915447; /* sqrt(2) * (-c1-c3) */
    z3 := z3 * -FIX_1_961570560; /* sqrt(2) * (-c3-c5) */
    z4 := z4 * -FIX_0_390180644; /* sqrt(2) * (c5-c3) */
    
    z3 := z3 + z5;
    z4 := z4 + z5;
    
    dataptr[7] := ((tmp4 + z1 + z3) + (1 << (CONST_BITS-PASS1_BITS-1)) >>  CONST_BITS-PASS1_BITS-1);
    dataptr[5] := ((tmp5 + z2 + z4) + (1 << (CONST_BITS-PASS1_BITS-1)) >>  CONST_BITS-PASS1_BITS);
    dataptr[3] := ((tmp6 + z2 + z3) + (1 << (CONST_BITS-PASS1_BITS-1)) >>  CONST_BITS-PASS1_BITS);
    dataptr[1] := ((tmp7 + z1 + z4) + (1 << (CONST_BITS-PASS1_BITS-1)) >>  CONST_BITS-PASS1_BITS)
    
    /*dataptr := dataptr[DCTSIZE]		 advance pointer to next row */
  );

  /* Pass 2: process columns.
   * We remove the PASS1_BITS scaling, but leave the results scaled up
   * by an overall factor of 8.
   */

  dataptr := data;
  for ctr := DCTSIZE-1 to 0 do (
    tmp0 := dataptr[DCTSIZE*0] + dataptr[DCTSIZE*7];
    tmp7 := dataptr[DCTSIZE*0] - dataptr[DCTSIZE*7];
    tmp1 := dataptr[DCTSIZE*1] + dataptr[DCTSIZE*6];
    tmp6 := dataptr[DCTSIZE*1] - dataptr[DCTSIZE*6];
    tmp2 := dataptr[DCTSIZE*2] + dataptr[DCTSIZE*5];
    tmp5 := dataptr[DCTSIZE*2] - dataptr[DCTSIZE*5];
    tmp3 := dataptr[DCTSIZE*3] + dataptr[DCTSIZE*4];
    tmp4 := dataptr[DCTSIZE*3] - dataptr[DCTSIZE*4];
    
    /* Even part per LL&M figure 1 --- note that published figure is faulty;
     * rotator "sqrt(2)*c1" should be "sqrt(2)*c6".
     */
    
    tmp10 := tmp0 + tmp3;
    tmp13 := tmp0 - tmp3;
    tmp11 := tmp1 + tmp2;
    tmp12 := tmp1 - tmp2;
   
    dataptr[DCTSIZE*0] := ((tmp10 + tmp11) + (1 << (PASS1_BITS-1)) >>  PASS1_BITS);
    dataptr[DCTSIZE*4] := ((tmp10 - tmp11) + (1 << (PASS1_BITS-1)) >>  PASS1_BITS);
    
    z1 := tmp12 + tmp13 * FIX_0_541196100;
    dataptr[DCTSIZE*2] := ((z1 + tmp13 * FIX_0_765366865) + (1 << (CONST_BITS+PASS1_BITS-1)) >>  CONST_BITS+PASS1_BITS);
    dataptr[DCTSIZE*6] := ((z1 + tmp12 * -FIX_1_847759065) + (1 << (CONST_BITS+PASS1_BITS-1)) >>  CONST_BITS+PASS1_BITS);
    
    /* Odd part per figure 8 --- note paper omits factor of sqrt(2).
     * cK represents cos(K*pi/16).
     * i0..i3 in the paper are tmp4..tmp7 here.
     */
    
    z1 := tmp4 + tmp7;
    z2 := tmp5 + tmp6;
    z3 := tmp4 + tmp6;
    z4 := tmp5 + tmp7;
    z5 := z3 + z4 * FIX_1_175875602; /* sqrt(2) * c3 */
    
    tmp4 := tmp4 * FIX_0_298631336; /* sqrt(2) * (-c1+c3+c5-c7) */
    tmp5 := tmp5 * FIX_2_053119869; /* sqrt(2) * ( c1+c3-c5+c7) */
    tmp6 := tmp6 * FIX_3_072711026; /* sqrt(2) * ( c1+c3+c5-c7) */
    tmp7 := tmp7 * FIX_1_501321110; /* sqrt(2) * ( c1+c3-c5-c7) */
    z1 := z1 * -FIX_0_899976223; /* sqrt(2) * (c7-c3) */
    z2 := z2 * -FIX_2_562915447; /* sqrt(2) * (-c1-c3) */
    z3 := z3 * -FIX_1_961570560; /* sqrt(2) * (-c3-c5) */
    z4 := z4 *  -FIX_0_390180644; /* sqrt(2) * (c5-c3) */
    
    z3 := z3 + z5;
    z4 := z4 + z5;
   
    dataptr[DCTSIZE*7] := ((tmp4 + z1 + z3) + (1 << (CONST_BITS+PASS1_BITS-1)) >>  CONST_BITS+PASS1_BITS);
    dataptr[DCTSIZE*5] := ((tmp5 + z2 + z4) + (1 << (CONST_BITS+PASS1_BITS-1)) >>  CONST_BITS+PASS1_BITS);
    dataptr[DCTSIZE*3] := ((tmp6 + z2 + z3) + (1 << (CONST_BITS+PASS1_BITS-1)) >>  CONST_BITS+PASS1_BITS);
    dataptr[DCTSIZE*1] := ((tmp7 + z1 + z4) + (1 << (CONST_BITS+PASS1_BITS-1)) >>  CONST_BITS+PASS1_BITS)
    
    /*dataptr := dataptr + 1			 advance pointer to next column */
  )

end


/* Main function
   Time to function execution time using logic analyzer,
   which measures the OFF time of a LED on board.

   The switching latency, including the function call/return time,
   is measured to be equal to 1.1us (22 clock cycles).
*/
in

  /* Worst case settings */
  /* Set array to random values */
  seed := 0;
  for i := 0 to 63 do (
    seed := ((seed * 133) + 81) / 65535;
    data[i] := seed
  );

  jpeg_fdct_islow();
  print("Ok")

end
