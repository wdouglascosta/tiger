/*************************************************************************/
/*                                                                       */
/*   SNU-RT Benchmark Suite for Worst Case Timing Analysis               */
/*   =====================================================               */
/*                              Collected and Modified by S.-S. Lim      */
/*                                           sslim@archi.snu.ac.kr       */
/*                                         Real-Time Research Group      */
/*                                        Seoul National University      */
/*                                                                       */
/*                                                                       */
/*        < Features > - restrictions for our experimental environment   */
/*                                                                       */
/*          1. Completely structured.                                    */
/*               - There are no unconditional jumps.                     */
/*               - There are no exit from loop bodies.                   */
/*                 (There are no 'break' or 'return' in loop bodies)     */
/*          2. No 'switch' statements.                                   */
/*          3. No 'do..while' statements.                                */
/*          4. Expressions are restricted.                               */
/*               - There are no multiple expressions joined by 'or',     */
/*                'and' operations.                                      */
/*          5. No library calls.                                         */
/*               - All the functions needed are implemented in the       */
/*                 source file.                                          */
/*                                                                       */
/*                                                                       */
/*************************************************************************/
/*                                                                       */
/*  FILE: fft1.c                                                         */
/*  SOURCE : Turbo C Programming for Engineering by Hyun Soon Ahn        */
/*                                                                       */
/*  DESCRIPTION :                                                        */
/*                                                                       */
/*     FFT using Cooly-Turkey algorithm.                                 */
/*     There are two inputs, ar[] and ai[]. ar[] is real number parts    */
/*     of input array and the ai[] is imaginary number parts of input.   */
/*     The function fft1 process FFT or inverse FFT according to the    .*/
/*     parameter flag. (FFT with flag=0, inverse FFT with flag=1).       */
/*                                                                       */
/*                                                                       */
/*  REMARK :                                                             */
/*                                                                       */
/*  EXECUTION TIME :                                                     */
/*                                                                       */
/*                                                                       */
/*************************************************************************/

let

type intARRAY = array of int

var PI  := 3
var MPI := 3

var ar := intARRAY[8] of 0
var ai := intARRAY[8] of 0

var n := 8
var flag := 0
var chkerr := 0

function fabs(n:int):int = 
  if (n >= 0) then n else -n

function log(n:int):int = 4

function sin(rad:int):int = 
let
  var app  := 0
  var diff := 0
  var inc  := 1
in
  while (rad > 2*PI) do
    rad := rad - 2 * PI;
  while (rad < -2*PI) do
    rad = rad + 2 * PI;
  app := rad;
  diff := rad;
  diff := (diff * (-(rad*rad))) / ((2 * inc) * (2 * inc + 1));
  app := app + diff;
  inc := inc + 1;
  while(fabs(diff) >= 1) do (
    diff := (diff * (-(rad*rad))) / ((2 * inc) * (2 * inc + 1));
    app  := app + diff;
    inc  := inc + 1
  );
  app
end


function cos(rad:int):int = sin(PI / 2 - rad)

function fft1(n:int, flag:int):int =
let

  var k    := 0 
  var xp   := 0
  var xp2  := 0
  var j1   := 0
  var j2   := 0
  var iter := 0
  var sign := 0
  var w    := 0
  var wr   := 0
  var wi   := 0
  var dr1  := 0
  var dr2  := 0
  var di1  := 0
  var di2  :=0 
  var tr   := 0
  var ti   := 0
  var arg  := 0
  var ret  := 0
  var j    := 0

in

  if(n < 2)
  then 
    ret := 999
  else (
    iter := log(n)/log(2);
    j := 1;
    for i := 0 to iter-1 do
      j = j * 2;
    if (fabs(n-j) > 1) 
    then
      ret := 1
    else (
      /*  Main FFT Loops  */
      sign := if (flag = 1) then 1 else -1;
      xp2 := n;
      for it := 0 to iter-1 do
	(
	  xp := xp2;
	  xp2 = xp2 / 2;
	  w := PI / xp2;
	  for k := 0 to xp2-1 do
	    (
	      arg := k * w;
	      wr := cos(arg);
	      wi := sign * sin(arg);
	      i := k - xp;
	      for j := xp to n do /*j += xp*/
		(
		  j1 := j + i;
		  j2 := j1 + xp2;
		  dr1 := ar[j1];
		  dr2 := ar[j2];
		  di1 := ai[j1];
		  di2 := ai[j2];
		  tr := dr1 - dr2;
		  ti := di1 - di2;
		  ar[j1] := dr1 + dr2;
		  ai[j1] := di1 + di2;
		  ar[j2] := tr * wr - ti * wi;
		  ai[j2] := ti * wr + tr * wi
		)
	    )
	);

      /*  Digit Reverse Counter  */

      j1 := n / 2;
      j2 := n - 1;
      j := 1;
      for i := 1 to j2 do
	(
	  if(i < j)
          then
	    (
	      tr := ar[j-1];
	      ti := ai[j-1];
	      ar[j-1] := ar[i-1];
	      ai[j-1] := ai[i-1];
	      ar[i-1] := tr;
	      ai[i-1] := ti
	    );
	  k := j1;
	  while (k < j) do
	    (
	      j = j - k;
	      k = k /2
	    );
	  j = j + k
	);
      if (flag = 0)
      then  
	ret := 0 
      else (
	w := n;
	for i := 0 to n-1 do
	  (
	    ar[i] := ar[i] / w;
	    ai[i] := ai[i] / w
	  )
      )
    
    )
  );
  ret
end

function printint(i: int) =
  let function f(i:int) = if i>0 
             then (f(i/10); print(chr(i-i/10*10+ord("0"))))
   in if i<0 then (print("-"); f(-i))
      else if i>0 then f(i)
      else print("0")
  end

in

  /* ar  */
  for i := 0 to n-1 do
    ar[i] := cos(2*MPI*i/n);

  /* forward fft */
  flag := 0;
  chkerr := fft1(n, flag);
  print("chkerr: ");printint(chkerr);

  /* inverse fft */
  flag := 1;
  chkerr := fft1(n, flag)
  print("chkerr: ");printint(chkerr);

end



