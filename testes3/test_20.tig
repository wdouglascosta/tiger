/*************************************************************************/
/*                                                                       */
/*   SNU-RT Benchmark Suite for Worst Case Timing Analysis               */
/*   =====================================================               */
/*                              Collected and Modified by S.-S. Lim      */
/*                                           sslim@archi.snu.ac.kr       */
/*                                         Real-Time Research Group      */
/*                                        Seoul National University      */
/*                                                                       */
/*                                                                       */
/*        < Features > - restrictions for our experimental environment   */
/*                                                                       */
/*          1. Completely structured.                                    */
/*               - There are no unconditional jumps.                     */
/*               - There are no exit from loop bodies.                   */
/*                 (There are no 'break' or 'return' in loop bodies)     */
/*          2. No 'switch' statements.                                   */
/*          3. No 'do..while' statements.                                */
/*          4. Expressions are restricted.                               */
/*               - There are no multiple expressions joined by 'or',     */
/*                'and' operations.                                      */
/*          5. No library calls.                                         */
/*               - All the functions needed are implemented in the       */
/*                 source file.                                          */
/*                                                                       */
/*                                                                       */
/*************************************************************************/
/*                                                                       */
/*  FILE: select.c                                                       */
/*  SOURCE : Numerical Recipes in C - The Second Edition                 */
/*                                                                       */
/*  DESCRIPTION :                                                        */
/*                                                                       */
/*     A function to select the Nth largest number in the floating poi-  */
/*     nt array arr[].                                                   */
/*     The parameters to function select are k and n. Then the function  */
/*     selects k-th largest number out of n original numbers.            */
/*                                                                       */
/*  REMARK :                                                             */
/*                                                                       */
/*  EXECUTION TIME :                                                     */
/*                                                                       */
/*                                                                       */
/*************************************************************************/

let

type intARRAY = array of int
var arr := intARRAY[20] of 0


function select(k:int, n:int):int = 
let

  var ir := 0
  var mid := 0
  var i := 0
  var j := 0
  var a := 0
  var l := 0
  var temp  := 0
  var flag  := 0
  var flag2 := 0

in

  l:=1;
  ir:=n;
  while (not(flag)) do (
    if (ir <= l+1) then (
      if (ir = l+1) then
	if (arr[ir] < arr[l]) then (
	  
	  temp:=arr[l];
	  arr[l]:=arr[ir];
	  arr[ir]:=temp
	  
	);
      flag := 1
    ) else if (not(flag)) then (
      mid:=(l+ir) >> 1;
      temp:=arr[mid];
      arr[mid]:=arr[l+1];
      arr[l+1]:=temp;
      if (arr[l+1] > arr[ir]) then (
	temp:=arr[l+1];
	arr[l+1]:=arr[ir];
	arr[ir]:=temp
      );
      if (arr[l] > arr[ir]) then (
	temp:=arr[l];
	arr[l]:=arr[ir];
	arr[ir]:=temp
      );
      if (arr[l+1]> arr[l]) then (
	temp:=arr[l+1];
	arr[l]:=arr[l];
	arr[l]:=temp
      );
      i:=l+1;
      j:=ir;
      a:=arr[l];
      while (not(flag2)) do (
	i := i+1; 
	while (arr[i] < a) do i:= i+1;
	j := j-1; 
	while (arr[j] > a) do j:=j-1;
	if (j < i) then flag2 := 1;
	if (not(flag2)) then (
	  temp:=arr[i];
	  arr[i]:=arr[j];
	  arr[j]:=temp
	)
				
      );
      arr[l]:=arr[j];
      arr[j]:=a;
      if (j >= k) then ir:=j-1;
      if (j <= k) then l:=i
    )

  );
  arr[k]

end

function printint(i: int) =
  let function f(i:int) = if i>0 
             then (f(i/10); print(chr(i-i/10*10+ord("0"))))
   in if i<0 then (print("-"); f(-i))
      else if i>0 then f(i)
      else print("0")
  end

in

  arr[0] := 5;
  arr[1] := 4;
  arr[2] := 10;
  arr[3] := 1;
  arr[4] := 5;
  arr[5] := 100;
  arr[6] := 231;
  arr[7] := 111;
  arr[8] := 49;
  arr[9] := 99;
  arr[10] := 10;
  arr[11] := 150;
  arr[12] := 222;
  arr[13] := 101;
  arr[14] := 77;
  arr[15] := 44;
  arr[16] := 35;
  arr[17] := 20;
  arr[18] := 99;
  arr[19] := 888;

  printint(select(10, 20))

end

